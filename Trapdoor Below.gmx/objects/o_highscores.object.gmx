<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_tile_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha=0

//initiat the DLL
dllinit(0, true, true);
//The first data sent is ALWAYS slowest so lets get a useless thing like their IP
//i dont need it but now i have it and can do stuff with it...
global.IP=getIP();
/*
The longest your name can be is: 1000 characters
The biggest the score can be is: 18446744073709551615 WHOLE POSITIVE NUMBERS ONLY!
*/

var class, racetus;

switch(global.profession_set)
    {
    case 0: {class="Adventurer" break}
    case 1: {class="Warrior" break}
    case 2: {class="Paladin" break}
    case 3: {class="Assassin" break}
    case 4: {class="Hunter" break}
    case 5: {class="Marksman" break}
    case 6: {class="Wizard" break}
    case 7: {class="Fire Elementalist" break}
    case 8: {class="Ice Elementalist" break}
    case 9: {class="Death Mage" break}
    case 10: {class="Berserker" break}
    case 11: {class="Poisoner" break}
    case 12: {class="Priest" break}
    }
    
switch(global.race)
    {
    case 0: {racetus="Human" break}
    case 1: {racetus="Elf" break}
    case 2: {racetus="Undead" break}
    case 3: {racetus="Vampire" break}
    case 4: {racetus="Troll" break}
    case 5: {racetus="Dwarf" break}
    case 6: {racetus="Angel" break}
    case 7: {racetus="Goblin" break}
    case 8: {racetus="Wraith" break}
    }

for (i=0 i&lt;1 i+=0)
        {
        name = get_string('Enter your name (2-12 characters).','')
        if string_length(name)&gt;=2 &amp;&amp; string_length(name)&lt;11
        {i=1}
        }
        
name = rc4(name +string(' | Dungeon Level: ')+string(global.dungeon_level)+string(' | Race: ') +string(racetus)+string(' | Profession: ') +string(class)+string(' | Level: ') +string(global.player_level)+string(' | Vit: ')+string(global.player_total_vit)+string(' Str: ')+string(global.player_total_str)+string(' Dex: ')+string(global.player_total_dex)+string(' Int: ')+string(global.player_total_int)+string(' AC: ')+string(global.player_total_ac)+string(' EV: ')+string(global.player_total_ev)+string(' | Killed by: ')+string(global.player_killedby))
pts  = rc4(floor(global.player_total_xp));

//name=name+string(' | Dungeon Level: ') +string(global.dungeon_level)+string(' | Level: ') +string(global.player_level)+string(' | Stats: ')+string(global.player_total_vit)+string('/')+string(global.player_total_str)+string('/')+string(global.player_total_dex)+string('/')+string(global.player_total_int)+string('/')+string(global.player_total_ac)+string('/')+string(global.player_total_ev)+string('/')+string(' | Killed by: ')+string(global.player_killedby)
/*
The rc4 is not needed but for other games of mine some hackers attacked them
so the rc4 protects them from the bad people =]

it encrpyts/decrpyts the var but and returns a an encrypted string
*/
addScore(rc4(name),rc4(pts));
/*
easy to understand i guess...
1st argument = is the name of the person to enter data for
  EX: Mo
2nd argument = is their score [real or string]
  EX: '53',215
3rd argument = is the ID of the score to add [optional]
  EX: so if you had a bunch of minigames that you wanted online highscores for
      you give each minigame an id so you can get the scores for each minigame
      -----Leave blank if you only have one game-----
      
returns sucsess 1 or failure -1
*/
number=getScores(5,'scores',0);
/*
kind of harder but it is also simple
1st argument = the number of scores to get
  EX: put 10 for top ten best players!
      put 0 to get ALL scores
2nd argument = the varible name to store all the data [name,score,date]
  EX: The varible scores is going to have all the data stored
      ArrayX is wether it is a the |name --data[0,0]--, score --data[1,0]--, date --data[2,0]--|
      ArrayY is the player to get  |#1 player's name --data[0,0]--, #9 player's date --data[2,8]--, #67 players score --data[1,66]--|
3rd argument = how many days old can the score be?
  EX: put 0 if you want to get all the scores no matter what the date is
      put 7 to get the scores for this week
      put date_days_in_month(date_current_date()) for the scores this month
      put date_days_in_year(date_current_date()) for the scores this year
4th argument = set as 1 if you want your var[2nd argument] to be global good if you are using different objects
  DO NOT PUT global. IN FRONT OF THE VAR NAME!!!
  
retruns the number of scores [useful when making loops]
*/
//if they make it on the ohs list congradulate them =]
if real(rc4(pts))&gt;=real(scores[1,number-1])
show_message('Congrats you made it to the online highscore list!') else show_message("Your score didn't reach the top 5.")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//to screw it up for others...
//close the best dll ever [39DLL]
//so others can use it =]
dllfree();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//we gotta draw all the crap so people can see it!
draw_set_valign(fa_top)
draw_set_color(c_white)
draw_set_font(font_small)
draw_set_halign(fa_center)
draw_text(room_width/2,10,'Top 5 scores.')

/*
make a loop
this is a for loop that repeats the number[scores gotten from database]

start the var as 0 which is what the data is starts at
and increases by 1 until the number of people - 1 is reached...
*/

draw_set_halign(fa_left)
draw_text(10,40+(-1*20),'Name:')
draw_set_halign(fa_right)
draw_text(room_width-10,40+(-1*20),'Total Experience:')
for(i=0;i&lt;number;i+=1)
{


//write the names
draw_set_halign(fa_left)//alignment and coloration
draw_text_ext(10,40+(i*40),string(i+1)+'. '+scores[0,i],10,250)//put the number and their name

//write the date
//draw_set_halign(fa_center)//alignment and coloration
//draw_text(room_width/2,40+(i*20),date_date_string(real(scores[2,i])))
//it returns date as a string make it REAL() and put it in a way people can read i.e. DATE_DATE_STRING()

//write the score
draw_set_halign(fa_right)//alignment and coloration
draw_text(room_width-10,40+(i*40),scores[1,i])//put their score

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
