<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_tile_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message_background(bg_message)
message_button(s_button)
message_mouse_color(c_ltgray)

message_size(350,200)
message_input_color(make_color_rgb(38,25,7))
message_input_font(font_small,7,c_silver,0)
message_button_font(font_small,7,c_silver,1)
message_text_font(font_small,7,c_silver,0)

global.dungeon_level=1

global.message_box[0]=""
global.message_box[1]=""
global.message_box[2]=""
global.message_box[3]=""
global.message_box[4]=""
global.message_box[5]=""
global.message_box[6]=""
global.message_box[7]=""
global.message_box[8]=""


//CREATE INVENTORY

for (slot=0 slot&lt;20 slot+=1)
{
    for (data_line=0 data_line&lt;20 data_line+=1)
    {
    global.item[slot,data_line]=0
    global.item[slot,0]="" //NAME
    global.item[slot,1]=s_item_none //SPRITE
    global.item[slot,2]="" //TYPE
    global.item[slot,3]=0 //AMOUNT
    global.item[slot,4]="inventory" //if wielded
    global.item[slot,5]="" //EFFECT
    global.item[slot,6]="" //CLASS
    }

}
//INVENTORY CO-ORDINATES
for (i=0 i&lt;4 i+=1)
{
slot_x[i]=212+(20*i)
slot_y[i]=192

slot_x[i+4]=212+(20*i)
slot_y[i+4]=192+20

slot_x[i+8]=212+(20*i)
slot_y[i+8]=192+40

slot_x[i+12]=212+(20*i)
slot_y[i+12]=192+60

slot_x[i+16]=212+(20*i)
slot_y[i+16]=192+80
}
//inventory inspect
global.inspect_window=false
global.inspect_name=""
global.inspect_type=""
global.inspect_sprite=s_item_none
global.inspect_effect=""
global.inspect_vit=0
global.inspect_str=0
global.inspect_dex=0
global.inspect_int=0
global.inspect_ac=0
global.inspect_ev=0

//CREATE MESSAGE MEMORY
for (i=0 i&lt;32 i+=1)
{
global.new_message[i]=""
}

//OTHER
global.controller_action=0

//SAVE STATS

global.player_level=1
global.player_vit=18 //HP/2
global.player_str=18 //melee damage
global.player_dex=18 //ranged damage, defence against melee/ranged
global.player_int=18 //using advanced spells and other
global.player_xp=0
global.player_total_xp=0
global.player_killedby='Survived!'

/*PROFESSIONS

- Adventurer (more food, melee weapon, bow, arrows)
- Warrior (AC-gear, melee weapon, str build)
- Paladin (AC-gear, melee weapon, str/int build, healing spells)
- Assassin (EV-gear, melee weapon, dex build)
- Hunter (Bow, more food, dex build)
- Marksman (Bow, EV-gear, dex build)
- Wizard (basic bolt, mixature skills, robes, int_build)
- Fire Elementalist (Fire aoe bolt, robes, int_build)
- Ice Elementalist (Slow Spells, int_build)
- Death Wizard (Ghost form, drain, int_build)
- Berserker (STR++ no armour)
- Venom mage
*/

player_profession=global.profession_set//get_integer("0=adventurer, 1=warrior, 2=pala, 3=assa, 4=hunt, 5=marks, 6=wizzy, 7=fire ele, 8=ice ele, 9=deathmage, 10=berserker, 11=poisoner",0)
player_race=global.race

switch(player_profession)
{
    case 0: {give_item("sword")give_item("bow")give_item("arrows")give_item("food")give_item("throwing_spears") break}//adventurer
    case 1: {give_item("sword")give_item("food")give_item("armour")give_item("boots") global.player_str+=4  global.player_int-=4 break}//warrior
    case 2: {give_item("scroll_healing")give_item("sword")give_item("heavy_armour")give_item("food") global.player_vit+=8 global.player_int-=4 global.player_dex-=4 break} //paladin
    case 3: {give_item("dagger")give_item("cloak")give_item("food")give_item("scroll_shadows") global.player_int-=2 global.player_vit-=4 global.player_dex+=6  break}//assassin
    case 4: {give_item("bow")give_item("arrows")give_item("boots")give_item("food") global.player_dex+=3 global.player_str-=4 break} //hunter
    case 5: {give_item("bow")give_item("cloak")give_item("arrows")give_item("food") global.player_dex+=7 global.player_vit-=4 global.player_int-=4 break} //marksman
    case 6: {give_item("robe_magical")give_item("staff_brass")give_item("scroll_magic_dart")give_item("scroll_confusion")give_item("food") global.player_int+=8 global.player_vit-=2 global.player_str-=2 break} //wizard
    case 7: {give_item("robe_elemental")give_item("staff_red")give_item("scroll_fireball")give_item("scroll_inferno")give_item("food") global.player_int+=8 global.player_vit-=2 break} //fire ele
    case 8: {give_item("robe_magical")give_item("staff_blue")give_item("scroll_ice_shard")give_item("scroll_freeze")give_item("food") global.player_int+=8 global.player_vit-=2 global.player_str-=2 break} //ice ele
    case 9: {give_item("robe_death")give_item("staff_death")give_item("scroll_life_drain")give_item("scroll_magic_dart")give_item("scroll_ghost_form")give_item("food") global.player_int+=8 global.player_vit-=2 global.player_str-=2 break} //deathmage
    case 10: {give_item("great_axe")give_item("throwing_axes")give_item("scroll_fiery_rage")give_item("gloves")give_item("food") global.player_str+=12 global.player_dex-=4 global.player_int-=4 break}//berserker
    case 11: {give_item("robe_green")give_item("staff_illusion")give_item("scroll_snakebite")give_item("scroll_toxic_shock") global.player_int+=8 global.player_vit-=2 global.player_str-=2 break} //venom mage
    case 12: {give_item("robe_holy")give_item("staff_holy")give_item("scroll_healing")give_item("scroll_banish")give_item("scroll_magic_dart")give_item("food") global.player_int+=8 global.player_vit-=2 global.player_str-=2 break} //priest

}

switch(player_race)
{
    case 0: {global.player_vit-=2 global.player_str-=2 global.player_dex-=2 global.player_int-=2 break} //human: 1.2x xp, low stats
    case 1: {global.player_dex+=3 global.player_int+=3 break} //elf: high dex, high int, 0.8x xp
    case 2: {global.player_vit-=4 global.player_int+=2 break} //undead: low food usage, low vit
    case 3: {break} //vampire: no life regen, life steal melee attacks
    case 4: {global.player_dex-=4 global.player_int-=4 break} //troll: fast life regen, burn mana while attack=more dmg, low dex, low int
    case 5: {global.player_str+=4 global.player_int-=4 break} //dwarf: high str, low int, 
    case 6: {global.player_str-=6 global.player_vit+=4 break} //angel: know all potions, high vit, very low str
    case 7: {break} //goblin: goblins don't attack
    case 8: {global.player_vit+=2 global.player_str+=2 global.player_dex+=2 global.player_int+=2 break} //wraith: NO food usage, immune to conditions, can't wear armour, high base stats.

}



//ITEM BONUSES
global.player_weapon_vit=0
global.player_weapon_str=0
global.player_weapon_dex=0
global.player_weapon_int=0
global.player_weapon_ac=0
global.player_weapon_ev=0

global.player_shield_vit=0
global.player_shield_str=0
global.player_shield_dex=0
global.player_shield_int=0
global.player_shield_ac=0
global.player_shield_ev=0

global.player_helmet_vit=0
global.player_helmet_str=0
global.player_helmet_dex=0
global.player_helmet_int=0
global.player_helmet_ac=0
global.player_helmet_ev=0

global.player_armour_vit=0
global.player_armour_str=0
global.player_armour_dex=0
global.player_armour_int=0
global.player_armour_ac=0
global.player_armour_ev=0

global.player_amulet_vit=0
global.player_amulet_str=0
global.player_amulet_dex=0
global.player_amulet_int=0
global.player_amulet_ac=0
global.player_amulet_ev=0

global.player_gloves_vit=0
global.player_gloves_str=0
global.player_gloves_dex=0
global.player_gloves_int=0
global.player_gloves_ac=0
global.player_gloves_ev=0

global.player_boots_vit=0
global.player_boots_str=0
global.player_boots_dex=0
global.player_boots_int=0
global.player_boots_ac=0
global.player_boots_ev=0

//buffs &amp; debuffs
global.player_hunger=500
global.player_poisoned=0
global.player_confusion=0
global.player_crippled=0
global.player_invisible=0
global.player_rage=0
global.player_shadows=0


global.player_str_modifier=0
global.player_dex_modifier=0
global.player_int_modifier=0
global.player_ac_modifier=0
global.player_ev_modifier=0

//TOTALS
global.player_total_vit=global.player_vit+global.player_weapon_vit+global.player_helmet_vit+global.player_shield_vit+global.player_armour_vit+global.player_amulet_vit+global.player_gloves_vit+global.player_boots_vit
global.player_total_str=round(global.player_str+global.player_weapon_str+global.player_helmet_str+global.player_shield_str+global.player_armour_str+global.player_amulet_str+global.player_gloves_str+global.player_boots_str+global.player_str_modifier)
global.player_total_dex=round(global.player_dex+global.player_weapon_dex+global.player_helmet_dex+global.player_shield_dex+global.player_armour_dex+global.player_amulet_dex+global.player_gloves_dex+global.player_boots_dex+global.player_dex_modifier)
global.player_total_int=round(global.player_int+global.player_weapon_int+global.player_helmet_int+global.player_shield_int+global.player_armour_int+global.player_amulet_int+global.player_gloves_int+global.player_boots_int+global.player_int_modifier)
global.player_total_ac=round(global.player_weapon_ac+global.player_helmet_ac+global.player_shield_ac+global.player_armour_ac+global.player_amulet_ac+global.player_gloves_ac+global.player_boots_ac+global.player_ac_modifier)
global.player_total_ev=round(global.player_weapon_ev+global.player_helmet_ev+global.player_shield_ev+global.player_armour_ev+global.player_amulet_ev+global.player_gloves_ev+global.player_boots_ev+global.player_ev_modifier)

global.player_healthmax=global.player_total_vit*2
global.player_healthnow=global.player_healthmax

global.player_manamax=global.player_total_int
global.player_mananow=global.player_manamax


//POTION BUFFS &amp; DEBUFFS
global.potion_effect_listed[0]="big_heal" //good
global.potion_effect_listed[1]="small_heal" //good
global.potion_effect_listed[2]="invisible" //good
global.potion_effect_listed[3]="str_inc" //good
global.potion_effect_listed[4]="dex_inc" //good
global.potion_effect_listed[5]="int_inc" //good
global.potion_effect_listed[6]="ac_inc" //good
global.potion_effect_listed[7]="ev_inc" //good

global.potion_effect_listed[8]="poison" //bad
global.potion_effect_listed[9]="cripple" //bad
global.potion_effect_listed[10]="str_deg" //bad
global.potion_effect_listed[11]="dex_deg" //bad
global.potion_effect_listed[12]="int_deg" //bad
global.potion_effect_listed[13]="ac_deg" //bad
global.potion_effect_listed[14]="ev_deg" //bad

global.potion_effect_listed[15]="anti_poison" //good



global.potion_effect_big_heal=false
global.potion_effect_small_heal=false
global.potion_effect_invisible=false
global.potion_effect_str_inc=false
global.potion_effect_dex_inc=false
global.potion_effect_int_inc=false
global.potion_effect_ac_inc=false
global.potion_effect_ev_inc=false

global.potion_effect_poison=false
global.potion_effect_cripple=false
global.potion_effect_str_deg=false
global.potion_effect_dex_deg=false
global.potion_effect_int_deg=false
global.potion_effect_ac_deg=false
global.potion_effect_ev_deg=false

global.potion_effect_anti_poison=false

if global.race=6
{
global.potion_effect_big_heal=true
global.potion_effect_small_heal=true
global.potion_effect_invisible=true
global.potion_effect_str_inc=true
global.potion_effect_dex_inc=true
global.potion_effect_int_inc=true
global.potion_effect_ac_inc=true
global.potion_effect_ev_inc=true

global.potion_effect_poison=true
global.potion_effect_cripple=true
global.potion_effect_str_deg=true
global.potion_effect_dex_deg=true
global.potion_effect_int_deg=true
global.potion_effect_ac_deg=true
global.potion_effect_ev_deg=true

global.potion_effect_anti_poison=true
}



global.potion_effect_green=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltgreen=global.potion_effect_listed[round(random(15))]

global.potion_effect_red=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltred=global.potion_effect_listed[round(random(15))]

global.potion_effect_yellow=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltyellow=global.potion_effect_listed[round(random(15))]

global.potion_effect_blue=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltblue=global.potion_effect_listed[round(random(15))]

global.potion_effect_pink=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltpink=global.potion_effect_listed[round(random(15))]

global.potion_effect_cyan=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltcyan=global.potion_effect_listed[round(random(15))]

global.potion_effect_black=global.potion_effect_listed[round(random(15))]
global.potion_effect_ltblack=global.potion_effect_listed[round(random(15))]

//OTHER
global.level_up=false
global.ranged_attack=false
esc=false
global.savetimer=0




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_anykey) || mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right)
{
global.inspect_window=false
}

if global.player_xp&gt;(global.player_level*global.player_level)*10+100 &amp;&amp; global.player_healthnow&gt;0
{
    if global.sound=true{sound_play(snd_levelup)}

global.player_xp=0
global.level_up=true
global.player_level+=1
add_message("============================")
add_message("You gained a level!")
add_message("Increace (V)itality, (S)trength,")
add_message("(D)exterity or (I)ntelligence.")
add_message("============================")
}

/*if global.player_poisoned&gt;0 and global.controller_action=1
    {
    global.player_poisoned-=1
    
    if frac(global.player_poisoned/5)=0
        {
        global.player_healthnow-=round(global.player_healthnow*0.05)+1
        if global.player_healthnow&lt;=0
        {add_message("You have been badly wounded by poison.")}
        }
    }*/



//TOTALS
global.player_total_vit=global.player_vit+global.player_weapon_vit+global.player_helmet_vit+global.player_shield_vit+global.player_armour_vit+global.player_amulet_vit+global.player_gloves_vit+global.player_boots_vit
global.player_total_str=round(global.player_str+global.player_weapon_str+global.player_helmet_str+global.player_shield_str+global.player_armour_str+global.player_amulet_str+global.player_gloves_str+global.player_boots_str+global.player_str_modifier)
global.player_total_dex=round(global.player_dex+global.player_weapon_dex+global.player_helmet_dex+global.player_shield_dex+global.player_armour_dex+global.player_amulet_dex+global.player_gloves_dex+global.player_boots_dex+global.player_dex_modifier)
global.player_total_int=round(global.player_int+global.player_weapon_int+global.player_helmet_int+global.player_shield_int+global.player_armour_int+global.player_amulet_int+global.player_gloves_int+global.player_boots_int+global.player_int_modifier)
global.player_total_ac=round(global.player_weapon_ac+global.player_helmet_ac+global.player_shield_ac+global.player_armour_ac+global.player_amulet_ac+global.player_gloves_ac+global.player_boots_ac+global.player_ac_modifier)
global.player_total_ev=round(global.player_weapon_ev+global.player_helmet_ev+global.player_shield_ev+global.player_armour_ev+global.player_amulet_ev+global.player_gloves_ev+global.player_boots_ev+global.player_ev_modifier)

global.player_healthmax=global.player_total_vit*2

if global.player_healthnow&gt;global.player_healthmax
{global.player_healthnow=global.player_healthmax}

//MESSAGE BOX
for (n=0 n&lt;32 n+=1)
{
if !(global.new_message[n]="")
    {
    add_line(global.new_message[n])
    global.new_message[n]=""
    }
}

if instance_exists(o_player)
{
x=o_player.x+50
y=o_player.y+50
}

global.controller_action=0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.player_healthnow&lt;0
{
global.player_healthnow=0
}

if global.level_up=false
{
for (s=0 s&lt;20 s+=1)
    {
    if global.item[s,5]="fireball" &amp;&amp; keyboard_check_pressed(ord('E'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="inferno" &amp;&amp; keyboard_check_pressed(ord('R'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="ice_shard" &amp;&amp; keyboard_check_pressed(ord('T'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="freeze" &amp;&amp; keyboard_check_pressed(ord('Y')) &amp;&amp; esc=false
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="snakebite" &amp;&amp; keyboard_check_pressed(ord('U'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="toxic_shock" &amp;&amp; keyboard_check_pressed(ord('I'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="fiery_rage" &amp;&amp; keyboard_check_pressed(ord('O'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="ghost_form" &amp;&amp; keyboard_check_pressed(ord('D'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
        
    if global.item[s,5]="life_drain" &amp;&amp; keyboard_check_pressed(ord('F'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="blink" &amp;&amp; keyboard_check_pressed(ord('G'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="confusion" &amp;&amp; keyboard_check_pressed(ord('H'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="shadows" &amp;&amp; keyboard_check_pressed(ord('J'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="magic_dart" &amp;&amp; keyboard_check_pressed(ord('K'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="healing" &amp;&amp; keyboard_check_pressed(ord('L'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="banish" &amp;&amp; keyboard_check_pressed(ord('P'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}
    if global.item[s,5]="devastation" &amp;&amp; keyboard_check_pressed(ord('Z'))
        {if global.sound=true{sound_play(snd_use)} use_scroll_slot(s) break}

    }
}

if global.player_healthnow&gt;0 &amp;&amp; keyboard_check_pressed(vk_escape) &amp;&amp; !instance_exists(o_generate_map)
{
    if esc=false
    {esc=true exit}
    if esc=true
    {esc=false exit}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room=room1
{
instance_create(0,0,o_generate_map)
instance_create(0,0,o_icon_sounds)
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1)

//INI
draw_set_color(c_white)
draw_set_font(font0)


if (room=room1 || room=room_tutorial_land)
{{{{{{//START ALL��������������������������������������������������������������������


//TEST
/*
draw_text(view_xview[0]+10,view_yview[0]+10,fps)
draw_text(view_xview[0]+10,view_yview[0]+30,'INVITEM: ' +string(instance_number(o_inventory_item)))
draw_text(view_xview[0]+10,view_yview[0]+50,'walls: ' +string(instance_number(o_tile_wall)))
*/

//BLACK SQUARES
draw_rectangle_color(view_xview[0]+200,view_yview[0],view_xview[0]+300,view_yview[0]+300,c_black,c_black,c_black,c_black,0)
draw_rectangle_color(view_xview[0],view_yview[0]+200,view_xview[0]+300,view_yview[0]+300,c_black,c_black,c_black,c_black,0)

//MESSAGEBOX
draw_text(view_xview[0]+5,view_yview[0]+280-10*8,global.message_box[8])
draw_text(view_xview[0]+5,view_yview[0]+280-10*7,global.message_box[7])
draw_text(view_xview[0]+5,view_yview[0]+280-10*6,global.message_box[6])
draw_text(view_xview[0]+5,view_yview[0]+280-10*5,global.message_box[5])
draw_text(view_xview[0]+5,view_yview[0]+280-10*4,global.message_box[4])
draw_text(view_xview[0]+5,view_yview[0]+280-10*3,global.message_box[3])
draw_text(view_xview[0]+5,view_yview[0]+280-10*2,global.message_box[2])
draw_text(view_xview[0]+5,view_yview[0]+280-10,global.message_box[1])
draw_text(view_xview[0]+5,view_yview[0]+280,global.message_box[0])

//STATS
draw_healthbar(view_xview[0]+205,view_yview[0]+5,view_xview[0]+205+90,view_yview[0]+16,(global.player_healthnow/global.player_healthmax*100),c_red,c_lime,c_lime,0,1,1)
draw_healthbar(view_xview[0]+205,view_yview[0]+16,view_xview[0]+205+90,view_yview[0]+27,(global.player_mananow/global.player_manamax*100),make_color_rgb(50,50,50),c_blue,c_blue,0,1,1)


draw_set_halign(fa_center)
draw_set_color(c_black)
draw_text(view_xview[0]+205+45,view_yview[0]+4,'HP: '+string(global.player_healthnow)+string('/')+string(global.player_healthmax))
draw_set_color(c_white)
draw_text(view_xview[0]+205+45,view_yview[0]+4+11,'MP: '+string(global.player_mananow)+string('/')+string(global.player_manamax))

draw_set_halign(fa_left)
draw_set_color(c_white)


//SHOW STATS
colored_stats(global.player_total_vit,global.player_vit)
draw_text(view_xview[0]+205,view_yview[0]+20+11,'VIT: '+string(global.player_total_vit))
colored_stats(global.player_total_str,global.player_str)
draw_text(view_xview[0]+205,view_yview[0]+35+11,'STR: '+string(global.player_total_str))
colored_stats(global.player_total_dex,global.player_dex)
draw_text(view_xview[0]+205,view_yview[0]+50+11,'DEX: '+string(global.player_total_dex))
colored_stats(global.player_total_int,global.player_int)
draw_text(view_xview[0]+205,view_yview[0]+65+11,'INT: '+string(global.player_total_int))

colored_stats(global.player_total_ac,0)
draw_text(view_xview[0]+205+45,view_yview[0]+20+11,'AC: '+string(global.player_total_ac))
colored_stats(global.player_total_ev,0)
draw_text(view_xview[0]+205+45,view_yview[0]+35+11,'EV: '+string(global.player_total_ev))
draw_set_color(c_white)
if global.level_up=false
{
draw_text(view_xview[0]+205+45,view_yview[0]+50+11,'LvL: '+string(global.player_level))
}
else
{
draw_set_color(c_lime)
draw_text(view_xview[0]+205+45,view_yview[0]+50+11,'LvL: '+string(global.player_level)+string('+'))
draw_set_color(c_white)
}

draw_set_color(c_white)
draw_text(view_xview[0]+205+45,view_yview[0]+65+11,'XP: '+string(global.player_total_xp))

draw_text(view_xview[0]+205,view_yview[0]+80+11,'Dungeon level: '+string(global.dungeon_level))


//HUNGER
var hunger_text;
hunger_text='lol'

if global.player_hunger&lt;=700 &amp;&amp; global.player_hunger&gt;600 {hunger_text='satiated' draw_set_color(make_color(0,128,255))}
if global.player_hunger&lt;=600 &amp;&amp; global.player_hunger&gt;300 {hunger_text='' draw_set_color(make_color(0,128,255))}
if global.player_hunger&lt;=300 &amp;&amp; global.player_hunger&gt;150 {hunger_text='hungry' draw_set_color(c_yellow)}
if global.player_hunger&lt;=150 &amp;&amp; global.player_hunger&gt;100 {hunger_text='very hungry' draw_set_color(make_color(225,128,0))}
if global.player_hunger&lt;=100 &amp;&amp; global.player_hunger&gt;50 {hunger_text='starving' draw_set_color(c_red)}
if global.player_hunger&lt;=50 {hunger_text='!!!' draw_set_color(c_red) }


draw_text(view_xview[0]+205,view_yview[0]+85+20,hunger_text)
//draw_text(view_xview[0]+205,view_yview[0]+85+40,global.player_hunger)


//POISON
if global.player_poisoned&gt;0
{
draw_set_color(make_color(111,129,10))
draw_text(view_xview[0]+205,view_yview[0]+85+30,"poisoned")
}

//POISON
if global.player_crippled&gt;0
{
draw_set_color(make_color(172,7,7))
draw_text(view_xview[0]+205,view_yview[0]+85+40,"crippled")
}

//POISON
if global.player_invisible&gt;0
{
draw_set_color(make_color(57,108,119))
draw_text(view_xview[0]+205,view_yview[0]+85+50,"invisible")
}

draw_set_color(c_white)


//INVENTORY

draw_sprite_ext(s_inventory2,-1,view_xview[0]+212,view_yview[0]+192,1,1,image_angle,image_blend,1)

//SLOT0
for(i=0 i&lt;20 i+=1)
    {
    //INVENTORY
    draw_sprite(global.item[i,1],-1,view_xview[0]+slot_x[i]+2,view_yview[0]+slot_y[i]+2)

    if global.item[i,3]&gt;0
    {
    draw_set_font(font_small)
    draw_set_halign(fa_right)
    
    
    draw_set_color(c_black)
    draw_text(view_xview[0]+slot_x[i]+18-1,view_yview[0]+slot_y[i]+8,global.item[i,3])
    draw_text(view_xview[0]+slot_x[i]+18+1,view_yview[0]+slot_y[i]+8,global.item[i,3])
    draw_text(view_xview[0]+slot_x[i]+18,view_yview[0]+slot_y[i]+8-1,global.item[i,3])
    draw_text(view_xview[0]+slot_x[i]+18,view_yview[0]+slot_y[i]+8+1,global.item[i,3])

    draw_set_color(c_white)
    draw_text(view_xview[0]+slot_x[i]+18,view_yview[0]+slot_y[i]+8,global.item[i,3])
    
    draw_set_halign(fa_left)
    draw_set_color(c_white)
    draw_set_font(font0)
    }
    
    //IF ITEM IS IN INVENTORY
    if global.item[i,4]="used"
    {
    draw_set_alpha(0.2)
    draw_rectangle_color(view_xview[0]+slot_x[i],view_yview[0]+slot_y[i],view_xview[0]+slot_x[i]+19,view_yview[0]+slot_y[i]+19,c_lime,c_lime,c_lime,c_green,0)
    draw_set_alpha(1)
    }
    
    
    if (mouse_x&gt;=view_xview[0]+slot_x[i] &amp;&amp; mouse_x&lt;view_xview[0]+slot_x[i]+20 &amp;&amp; mouse_y&gt;=view_yview[0]+slot_y[i] &amp;&amp; mouse_y&lt;view_yview[0]+slot_y[i]+20) &amp;&amp; !instance_exists(o_generate_map)
        {
        
            if !(global.item[i,0]="") &amp;&amp; global.inspect_window=false//INFOBOX
            {
            draw_set_alpha(0.6)
            draw_set_font(font_small)
            draw_rectangle_color(mouse_x-120,mouse_y-50,mouse_x,mouse_y,c_black,c_black,c_black,c_black,0)
            draw_set_alpha(1)
            draw_rectangle_color(mouse_x-120,mouse_y-50,mouse_x,mouse_y,c_white,c_white,c_white,c_white,1)
        
            draw_text(mouse_x-120+5,mouse_y-50+5,global.item[i,0])
            
            var use_text;
            use_text=""
            
            switch (global.item[i,2])
                {
                    case "scroll":      
                    {
                    switch(global.item[i,5])
                        {
                        case "fireball":    {use_text="[L-Click/E]: Read" break}
                        case "inferno":     {use_text="[L-Click/R]: Read" break}
                        case "ice_shard":   {use_text="[L-Click/T]: Read" break}
                        case "freeze":      {use_text="[L-Click/Y]: Read" break}
                        case "snakebite":   {use_text="[L-Click/U]: Read" break}
                        case "toxic_shock": {use_text="[L-Click/I]: Read" break}
                        case "fiery_rage":  {use_text="[L-Click/O]: Read" break}
                        case "ghost_form":  {use_text="[L-Click/D]: Read" break}
                        case "life_drain":  {use_text="[L-Click/F]: Read" break}
                        case "blink":       {use_text="[L-Click/G]: Read" break}
                        case "confusion":   {use_text="[L-Click/H]: Read" break}
                        case "shadows":     {use_text="[L-Click/J]: Read" break}
                        case "magic_dart":  {use_text="[L-Click/K]: Read" break}
                        case "healing":     {use_text="[L-Click/L]: Read" break}
                        case "banish":      {use_text="[L-Click/P]: Read" break}
                        case "devastation": {use_text="[L-Click/Z]: Read" break}
                        break
                        }
                    break
                    }
                
                case "arrows":              {use_text="[L-Click/B]: Shoot" break}
                case "throwing_spears":     {use_text="[L-Click/N]: Throw" break}
                case "throwing_axes":       {use_text="[L-Click/M]: Throw" break}
                case "food":                {use_text="[L-Click]: Eat" break}
                case "potion":              {use_text="[L-Click]: Drink" break}
                case "weapon":              {use_text="[L-Click]: Wield/Unwield" break}
                case "shield":              {use_text="[L-Click]: Wield/Unwield" break}
                case "helmet":              {use_text="[L-Click]: Wear/Take off" break}
                case "armour":              {use_text="[L-Click]: Wear/Take off" break}
                case "amulet":              {use_text="[L-Click]: Wear/Take off" break}
                case "gloves":              {use_text="[L-Click]: Wear/Take off" break}
                case "boots":               {use_text="[L-Click]: Wear/Take off" break}
                }
            draw_text(mouse_x-120+5,mouse_y-50+5+9,use_text)
            draw_text(mouse_x-120+5,mouse_y-50+5+18,"[R-Click]: Drop")
            draw_text(mouse_x-120+5,mouse_y-50+5+18+9,"[Shift+L-Click]: Inspect")
            }
        //LEFT CLICK
        if mouse_check_button_pressed(mb_left) &amp;&amp; global.player_healthnow&gt;0 &amp;&amp; !(keyboard_check(vk_shift)) &amp;&amp; global.inspect_window=false &amp;&amp; global.level_up=false
            {
            if global.sound=true {sound_play(snd_use)}
            
            switch (global.item[i,2])
                {
                case "weapon":          {use_weapon_slot(i) normalize_stats() break}
                case "shield":          {use_shield_slot(i) normalize_stats() break}
                case "amulet":          {use_amulet_slot(i) normalize_stats() break}
                case "armour":          {use_armour_slot(i) normalize_stats() break}
                case "helmet":          {use_helmet_slot(i) normalize_stats() break}
                case "gloves":          {use_gloves_slot(i) normalize_stats() break}
                case "boots":           {use_boots_slot(i) normalize_stats() break}
                case "potion":          {use_potion_slot(i) normalize_stats() break}
                case "food":            {use_food_slot(i) normalize_stats() break}
                case "arrows":          {use_arrows_slot(i) break}
                case "throwing_spears": {use_throwing_spears_slot(i) break}
                case "throwing_axes":   {use_throwing_axes_slot(i) break}
                case "scroll":          {use_scroll_slot(i) break}
                }
            draw_rectangle(view_xview[0]+slot_x[i],view_yview[0]+slot_y[i],view_xview[0]+slot_x[i]+19,view_yview[0]+slot_y[i]+19,1)
            }
        //RIGHT CLICK
        if mouse_check_button_pressed(mb_right) &amp;&amp; global.player_healthnow&gt;0 &amp;&amp; global.inspect_window=false &amp;&amp; global.level_up=false
            {
            if global.sound=true {sound_play(snd_drop)}
            
            switch (global.item[i,2])
                {
                case "weapon":          {drop_weapon_slot(i) normalize_stats() break}
                case "shield":          {drop_shield_slot(i) normalize_stats() break}
                case "amulet":          {drop_amulet_slot(i) normalize_stats() break}
                case "armour":          {drop_armour_slot(i) normalize_stats() break}
                case "helmet":          {drop_helmet_slot(i) normalize_stats() break}
                case "gloves":          {drop_gloves_slot(i) normalize_stats() break}
                case "boots":           {drop_boots_slot(i) normalize_stats() break}
                case "potion":          {drop_potion_slot(i) normalize_stats() break}
                case "food":            {drop_food_slot(i) normalize_stats() break}
                case "arrows":          {drop_arrows_slot(i) normalize_stats() break}
                case "throwing_spears": {drop_throwing_spears_slot(i) normalize_stats() break}
                case "throwing_axes":   {drop_throwing_axes_slot(i) normalize_stats() break}
                case "scroll":          {drop_scroll_slot(i) normalize_stats() break}
                }
            
            draw_rectangle(view_xview[0]+slot_x[i],view_yview[0]+slot_y[i],view_xview[0]+slot_x[i]+19,view_yview[0]+slot_y[i]+19,1)
            }
        //LEFT CLICK+CTRL
        if mouse_check_button_pressed(mb_left) &amp;&amp; global.player_healthnow&gt;0 &amp;&amp; (keyboard_check(vk_shift)) &amp;&amp; global.inspect_window=false &amp;&amp; global.level_up=false
            {
            if global.sound=true {sound_play(snd_use)}
            
            if !(global.item[i,0]="")
                {
                global.inspect_window=true
                
                global.inspect_name=global.item[i,0]
                global.inspect_type=global.item[i,2]
                global.inspect_sprite=global.item[i,1]
                global.inspect_effect=global.item[i,5]
                global.inspect_class=global.item[i,6]
                
                global.inspect_vit=global.item[i,10]
                global.inspect_str=global.item[i,11]
                global.inspect_dex=global.item[i,12]
                global.inspect_int=global.item[i,13]
                global.inspect_ac=global.item[i,14]
                global.inspect_ev=global.item[i,15]
            
                draw_rectangle(view_xview[0]+slot_x[i],view_yview[0]+slot_y[i],view_xview[0]+slot_x[i]+19,view_yview[0]+slot_y[i]+19,1)
                }
            } 
        }
    }

//INSPECT WINDOW
if global.inspect_window=true
{
draw_set_alpha(1)
draw_rectangle_color(view_xview[0],view_yview[0],view_xview[0]+200,view_yview[0]+200,make_color_rgb(64,64,64),make_color_rgb(64,64,64),c_black,c_black,0)
draw_set_alpha(0.4)
draw_rectangle_color(view_xview[0]+20,view_yview[0]+20,view_xview[0]+180,view_yview[0]+180,c_black,c_black,c_black,c_black,0)
draw_set_alpha(1)
draw_rectangle_color(view_xview[0]+20,view_yview[0]+20,view_xview[0]+180,view_yview[0]+180,c_white,c_white,c_white,c_white,1)


draw_set_font(font0)
draw_sprite(global.inspect_sprite,-1,view_xview[0]+10+30,view_yview[0]+10+30)

//WEAPON
if (global.inspect_type="weapon" || global.inspect_type="shield" || global.inspect_type="armour" || global.inspect_type="gloves" || global.inspect_type="boots" || global.inspect_type="helmet" || global.inspect_type="amulet")
{

//DRAW BONUS NUMBER  

    //name
    draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
    
    //str
    colored_stats(global.player_vit+global.inspect_vit,global.player_vit)
    draw_text(view_xview[0]+28+16,view_yview[0]+12+30+20,'Vitality: ' +string(global.inspect_vit))
    //dex
    colored_stats(global.player_str+global.inspect_str,global.player_str)
    draw_text(view_xview[0]+28+16,view_yview[0]+12+30+34,'Strength: ' +string(global.inspect_str))
    
    colored_stats(global.player_dex+global.inspect_dex,global.player_dex)
    draw_text(view_xview[0]+28+16,view_yview[0]+12+30+48,'Dexterity: ' +string(global.inspect_dex))
    
    colored_stats(global.player_int+global.inspect_int,global.player_int)
    draw_text(view_xview[0]+28+16,view_yview[0]+12+30+62,'Intelligence: ' +string(global.inspect_int))
    
    colored_stats(global.inspect_ac,0)
    draw_text(view_xview[0]+28+16,view_yview[0]+12+30+90,'Armour Class: ' +string(global.inspect_ac))
    
    colored_stats(global.inspect_ev,0)
    draw_text(view_xview[0]+28+16,view_yview[0]+12+30+104,'Evasion Value: ' +string(global.inspect_ev))
    
    draw_set_color(c_white)

}
    
if global.inspect_type="arrows"
    {
    draw_set_color(c_white)
    draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
    draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+14+40,'Pointed projectiles that are shot with a bow. # #Damage modifier: +0%',-1,140)
    }
if global.inspect_type="throwing_spears"
    {
    draw_set_color(c_white)
    draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
    draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+14+40,'Sharp edged pole weapons are used for throwing. Will break easily. # #Damage modifier: +50%',-1,140)
    }
if global.inspect_type="throwing_axes"
    {
    draw_set_color(c_white)
    draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
    draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+14+40,'Small hand axes can be thrown very effectively. # #Damage modifier: +20%',-1,140)
    }
    
if global.inspect_type="scroll"
    {
    if room=room_tutorial_land
    {
    if global.inspect_effect="devastation"
    {o_tutorial_guy.scroll_inspected=true}
    }
    
    var desc;
    
    switch (global.inspect_effect)
        {
        case "fireball":        {desc='Send out a fiery ball that deals area of effect damage. # #Damage modifier: +20% #Area damage modifier: -50% #Mana cost: 2' break}
        case "inferno":         {desc='All enemies around you take damage. # #Damage modifier: +50% #Mana cost: 4' break}
        case "ice_shard":       {desc='50% chance to freeze your target for the next 6 turns. # #Damage modifier: -20% #Against freezed target modifier: +100% #Mana cost: 2' break}
        case "freeze":          {desc='Freezes target and all adjacent enemies. # #Damage modifier: -100% #Mana cost: 4' break}
        case "snakebite":       {desc='50% chance to poison your target. # #Damage modifier: +0% #Mana cost: 2' break}
        case "toxic_shock":     {desc='Poisons all enemies within 4 tiles and deals damage. # #Damage modifier: -50% #Against poisoned target modifier: +0% #Mana cost: 5' break}
        case "ghost_form":      {desc='This scroll makes you invisible and decreases your strength, dexterity and intelligence to -99. # #Mana cost: 10' break}
        case "life_drain":      {desc='Damages your target and you gain the same amount of health. # #Damage modifier: +0% #Mana cost: 3' break}
        case "blink":           {desc='Teleports you to a target position. # #Mana cost: 10' break}
        case "confusion":       {desc='Target enemy has 50% chance to do nothing on its turn. # #Damage modifier: -100% #Mana cost: 3' break}
        case "shadows":         {desc='For next 20 turns your evasion value increaces as much as you have dexterity. # #Mana cost: 10' break}
        case "magic_dart":      {desc='A basic magic missile which deals damage. # #Damage modifier: -25% #Mana cost: 1' break}
        case "healing":         {desc='You gain 20 health. # #Mana cost: 8' break}
        case "banish":          {desc='Purifying light which is deadly against undeads. # #Damage modifier: +0% #Against undead target modifier: +75% #Mana cost: 3' break}
        case "fiery_rage":      {desc='For 20 turns your gain strength but lose dexterity. You deal damage to adjacent enemies every time when you hit them with a melee weapon. #Damage modifier: -50% #Mana cost: 10' break}
        case "devastation":     {desc='Target enemy takes massive amount of damage. # #Damage modifier: +30% #Mana cost: 2' break}
        }
            
draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+14+40,desc,-1,140)
}


if global.inspect_type="potion"
    {
    draw_set_color(c_white)
    draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
    draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+14+40,'Strange liquid in a small vial.',-1,140)

    var potion_info_text;
    potion_info_text=""


    if (global.inspect_effect="big_heal" &amp;&amp; global.potion_effect_big_heal=true)
    {potion_info_text="This potion heals you +30 health."}
    
    if (global.inspect_effect="small_heal" &amp;&amp; global.potion_effect_small_heal=true)
    {potion_info_text="This potion heals you +15 health."}
    
    if (global.inspect_effect="invisible" &amp;&amp; global.potion_effect_invisible=true)
    {potion_info_text="This potion makes you temporarily invisible."}
    
    if (global.inspect_effect="str_inc" &amp;&amp; global.potion_effect_str_inc=true)
    {potion_info_text="This potion improves your strength temporarily."}
    
    if (global.inspect_effect="dex_inc" &amp;&amp; global.potion_effect_dex_inc=true)
    {potion_info_text="This potion improves your dexterity temporarily."}
    
    if (global.inspect_effect="int_inc" &amp;&amp; global.potion_effect_int_inc=true)
    {potion_info_text="This potion improves your intelligence temporarily."}
    
    if (global.inspect_effect="ac_inc" &amp;&amp; global.potion_effect_ac_inc=true)
    {potion_info_text="This potion improves your armour class temporarily."}
    
    if (global.inspect_effect="ev_inc" &amp;&amp; global.potion_effect_ev_inc=true)
    {potion_info_text="This potion improves your evasion temporarily."}
    
    if (global.inspect_effect="poison" &amp;&amp; global.potion_effect_poison=true)
    {potion_info_text="Poisonous. Don't drink this."}
    
    if (global.inspect_effect="cripple" &amp;&amp; global.potion_effect_cripple=true)
    {potion_info_text="Crippling potion."}
    
    if (global.inspect_effect="str_deg" &amp;&amp; global.potion_effect_str_deg=true)
    {potion_info_text="This potion reduces your strength temporarily."}
    
    if (global.inspect_effect="dex_deg" &amp;&amp; global.potion_effect_dex_deg=true)
    {potion_info_text="This potion reduces your dexterity temporarily."}

    if (global.inspect_effect="int_deg" &amp;&amp; global.potion_effect_int_deg=true)
    {potion_info_text="This potion reduces your intelligence temporarily."}
    
    if (global.inspect_effect="ac_deg" &amp;&amp; global.potion_effect_ac_deg=true)
    {potion_info_text="This potion reduces your armour class temporarily."}
    
    if (global.inspect_effect="ev_deg" &amp;&amp; global.potion_effect_ev_deg=true)
    {potion_info_text="This potion reduces your evasion temporarily."}
    
    if (global.inspect_effect="anti_poison" &amp;&amp; global.potion_effect_anti_poison=true)
    {potion_info_text="This potion cures you from poison."}

    draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+38+40,potion_info_text,-1,140)
    }

if global.inspect_type="food"
    {
    draw_set_color(c_white)
    draw_text(view_xview[0]+28+30,view_yview[0]+12+30,global.inspect_name)
    draw_text_ext(view_xview[0]+10+30,view_yview[0]+12+14+40,'I guess this is meant to be eaten.',-1,140)
    }

//CLOSE
draw_set_color(c_white)
draw_text(view_xview[0]+10+30,view_yview[0]+182,'[Any key]: Close window')

}

if instance_exists(o_icon_sounds)
{
    if global.sound=true
    draw_sprite(s_icon_sound_on,-1,view_xview[0]+280,view_yview[0]+170)

    if global.sound=false
    draw_sprite(s_icon_sound_off,-1,view_xview[0]+280,view_yview[0]+170)
}

//LOADING
if (fps&gt;35 || instance_exists(o_generate_map))
{
draw_rectangle_color(view_xview[0],view_yview[0],view_xview[0]+400,view_yview[0]+400,c_black,c_black,c_black,c_black,0)
draw_sprite(s_banner,-1,view_xview[0],view_yview[0])
draw_set_color(c_white)
draw_set_font(font0)
draw_set_halign(fa_left)
draw_text(view_xview[0]+130,view_yview[0]+140,'Loading...')

if global.savetimer&gt;0
{
global.savetimer-=30/room_speed
draw_text(view_xview[0]+120,view_yview[0]+240,'Game Saved.')
}

if instance_exists(o_generate_map)
    {
    draw_healthbar(view_xview[0]+100,view_yview[0]+160,view_xview[0]+200,view_yview[0]+170,100-((o_generate_map.tile_count/300)*100)+1,c_black,make_color_rgb(96,47,15),c_red,0,0,1)
    draw_rectangle_color(view_xview[0]+100,view_yview[0]+160,view_xview[0]+200,view_yview[0]+170,c_ltgray,c_ltgray,c_ltgray,c_ltgray,1)
    draw_rectangle_color(view_xview[0]+99,view_yview[0]+159,view_xview[0]+201,view_yview[0]+171,c_gray,c_gray,c_gray,c_gray,1)
    }
}

draw_set_color(c_white)
draw_set_font(font0)

if global.dungeon_level=1 &amp;&amp; instance_exists(o_player) &amp;&amp; instance_exists(o_tile_stairs_down)
{
if (o_player.x=o_tile_stairs_down.x &amp;&amp; o_player.y=o_tile_stairs_down.y)
draw_text(view_xview[0]+20,view_yview[0]+20,'Press [Space] to go downstairs.')
}

//BACK TO MENU
{
    if global.player_healthnow&lt;1
        {
        draw_rectangle_color(view_xview[0]+20,view_yview[0]+20,view_xview[0]+80,view_yview[0]+33,c_black,c_black,c_black,c_black,0)
        draw_text(view_xview[0]+20,view_yview[0]+20,'Press ESC')
        if keyboard_check_pressed(vk_escape)
            {
            if global.dungeon_level&lt;=20
            room_goto(room_hiscores)
            else
            game_restart()
            }
        }
}

if (esc=true &amp;&amp; !instance_exists(o_generate_map))
    {
    draw_rectangle_color(view_xview[0]+20,view_yview[0]+20,view_xview[0]+170,view_yview[0]+33,c_black,c_black,c_black,c_black,0)
    draw_text(view_xview[0]+20,view_yview[0]+20,'Do you really want to quit? Y/N')
    if keyboard_check_pressed(ord('Y'))
        {
        instance_destroy()
        room_goto(room_menu)
        }
    if keyboard_check_pressed(ord('N'))
        {
        esc=false
        }
    }

}}}}}}//END ALL��������������������������������������������������
if room=room_hiscores
{
draw_sprite(s_banner,-1,view_xview[0],view_yview[0])
draw_set_color(c_white)
draw_set_font(font0)
draw_set_halign(fa_center)
draw_text_ext(150,170,'Your score: '+string(round(global.player_total_xp)),-1,200)
}



draw_set_alpha(1)</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=true &amp;&amp; !instance_exists(o_generate_map)
{
if global.sound=true {sound_play(snd_use)}
global.player_vit+=2
global.player_healthmax+=4
global.player_healthnow+=4

if global.race=8
{
global.player_vit+=2
global.player_healthmax+=4
global.player_healthnow+=4
}

global.level_up=false
with(o_aim){
instance_destroy()}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=true &amp;&amp; !instance_exists(o_generate_map)
{
if global.sound=true {sound_play(snd_use)}
global.player_str+=2

if global.race=8
{
global.player_str+=2
}

global.level_up=false
with(o_aim){
instance_destroy()}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=false &amp;&amp; !instance_exists(o_generate_map) &amp;&amp; esc=false
{
if global.sound=true {sound_play(snd_use)}
use_throwing_spears_slot()
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=false &amp;&amp; !instance_exists(o_generate_map)
{
if global.sound=true {sound_play(snd_use)}
use_throwing_axes_slot()
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=true &amp;&amp; !instance_exists(o_generate_map)
{
if global.sound=true {sound_play(snd_use)}
global.player_int+=2
global.player_manamax+=2
global.player_mananow+=2


if global.race=8
{
global.player_int+=2
global.player_manamax+=2
global.player_mananow+=2
}

global.level_up=false
with(o_aim){
instance_destroy()}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=true &amp;&amp; !instance_exists(o_generate_map)
{
if global.sound=true {sound_play(snd_use)}
global.player_dex+=2

if global.race=8
{global.player_dex+=2}

global.level_up=false
with(o_aim){
instance_destroy()}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.level_up=false &amp;&amp; !instance_exists(o_generate_map)
{
if global.sound=true {sound_play(snd_use)}
use_arrows_slot()
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
