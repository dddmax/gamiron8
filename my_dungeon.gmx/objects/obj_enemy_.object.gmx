<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 100;

//Setup Variables

//Internals
alarm[0] = 1 + random(room_speed);      //Start alarm for attacking player
image_speed = 0.2;                      //Image speed
image_xscale = 0.6 + random(0.4);       //Set a random scale to add variety
image_yscale = image_xscale;            //Set the yscale to match

//Special vars
mass = sprite_width * sprite_height;        //Fake "mass" for collisions
go = false;                                 //Controller
spd = 0.5 + random(1);                      //Movement speed
if image_xscale &gt; 0.8 hp = 2 else hp = 1;   //Health points
dmg = floor(image_xscale * 5);              //Damage the enemy does to the player

//Check where the enemy has been created and get the points 
//of entrance into the room for it..

xx = irandom(4)-2; // obj_player.x;
yy = irandom(4)-2; //obj_player.y;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create some bones!
audio_play_sound(snd_Bones_Fall, 0, false);
repeat(round(image_xscale * 10))
{
with (instance_create(x, y, obj_Decal))
    {
    sprite_index = spr_Skeleton_Bones;
    image_index = irandom (image_number - 1);
    image_speed = 0;
    image_xscale = 0.5 + random(0.5);
    image_yscale = 0.5 + random(0.5);
    image_angle = random (360);
    speed = 2 + random(3);
    direction = (other.image_angle - 180) + 90 - random(180);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check to see if the enemy is in the room
mp_potential_step(xx, yy, spd, false);      //Move the enemy

if point_distance(x, y, xx, yy) &lt; spd * 2   //Check to see if it has reached the room entrance
{
go = true;                                  //It has, so ATTAAAACK!
}
else alarm[0] = 1;                          //It hasn't so repeat the alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hp &lt;= 0 // Если жизни противника меньше или равны нулю, то...
{
    instance_destroy(); // Удаляем противника
    // Создаём кровь и т.д.
}
else
{
    if instance_exists(obj_player) // Если объект игрока существует
    {
        if !collision_line(x, y, obj_player.x, obj_player.y, obj_coll_parent, 0, 0)
        {
        // Действия противника, когда между ним и игроком нет стены.
        
        
        //Attack the player!
if go
{
mp_potential_step(obj_player.x, obj_player.y, spd, false);
}

//Set up the image angle to rotate smoothly.
//Remove this and see what happens!!!
var dd,ts;
dd = ((((point_direction(x, y, obj_player.x, obj_player.y) - image_angle) mod 360) + 540) mod 360) - 180;
image_angle += min(abs(dd), 5) * sign(dd);  



        }
    }
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 15; // Уменьшаем hp противника
//with other
    //instance_destroy(); // Удаляем пулю
if hp &lt;= 0 // Если жизни противника меньше или равны нулю, то...
{
    instance_destroy(); // Удаляем противника
    // Создаём кровь и т.д.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_coll_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic collision

//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other))
{
x -= xoff * om; //Move the instance out of collision
y -= yoff * om;
other.x += xoff * mm; //Move the other instance out of the collision
other.y += yoff * mm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw shadow
draw_sprite_ext(sprite_index, image_index, x - 5, y + 5, image_xscale, image_xscale, image_angle, c_black, 0.5);
//Draw enemy sprite
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
