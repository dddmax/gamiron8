<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dx_mini = view_xview + 10;
dy_mini = view_yview + 400;

var TILE_NONE = 0;
var TILE_FLOOR = 1;
var TILE_WALL = 2;
var TILE_ROOM_FLOOR = 3;
var TILE_ROOM_WALL = 4;
var TILE_DOOR = 5;
//global.MAP_W = 80;
//global.MAP_H = 60;
//argum1 = (global.MAP_W / room_width) * room_height;

//draw it on the screen(view[0])

draw_set_color(c_black);
draw_rectangle(dx_mini, dy_mini, dx_mini + global.MAP_W, dy_mini + global.MAP_H, 1);

for(i=0; i&lt;global.MAP_W; i+=1)
for(j=0; j&lt;global.MAP_H; j+=1)
{
    
    if (global.map_tile[i, j] == TILE_NONE) draw_set_color(c_black);    
    if (global.map_tile[i, j] == TILE_ROOM_FLOOR)  draw_set_color(c_dkgray);      
    if (global.map_tile[i, j] == TILE_FLOOR) draw_set_color(c_dkgray);
    if (global.map_tile[i, j] == TILE_ROOM_WALL) draw_set_color(c_gray);
    if (global.map_tile[i, j] == TILE_WALL) draw_set_color(c_gray);
    if (global.map_tile[i, j] == TILE_DOOR) draw_set_color(c_teal);
    draw_point(dx_mini + i, dy_mini + j);
    
    
    draw_set_color(c_red);
    //draw_point(dx_mini + ((obj_player.x / room_width) * global.MAP_W), dy_mini + ((obj_player.y / room_height) * global.MAP_H));
    draw_point(dx_mini + obj_player.x*global.MAP_W*32/160, dy_mini + obj_player.y*global.MAP_H*32/120);
     
}
//draw_sprite(argument1,-1,view_xview + ((x / room_width) * global.MAP_W),
        //view_yview + ((y / room_height) * global.MAP_H));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
