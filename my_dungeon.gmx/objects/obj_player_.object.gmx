<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Legs</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialise GLOBAL variables
//scr_Init_Globals();

//Prepare the player sprites
image_speed=0;
image_angle=random(360);

//Set AI target variables
global.Player_x=x;
global.Player_y=y;

//Set up control vars for player object

go=true;                //For controlling when the player can use the player
spd=3;                  //movement speed
mass=700;               //Mass
f_index=0;              //For the legs animation
f_spd=0.15;             //Animation speed
b_angle=image_angle;    //Body image angle
h_angle=image_angle;    //Head image angle
s_play=true;            //Footsteps sound controller
c_shoot=true;           //Shoot controller
g_shoot = true;         //Grenade controller
timer = room_speed / 4; //Shoot timer (length between shots
g_timer = 0;            //Control grenade distance

health = 100;           //player hp

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blood alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can shoot alarm
c_shoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot

//Check for shooting!
if go
{
//Check for mouse button
if mouse_check_button(mb_left)
    {
    //Check for the shooting variable
    if c_shoot
        {
        //Setup vars
        var xx, yy, mod_dif;
        c_shoot=false;                                          //Set shoot var to false
        alarm[0] = room_speed / 3;                              //Set shoot alarm
        audio_play_sound(snd_GunShoot_Pistol, 0, false);        //Play shot sound
        mod_dif = b_angle + 3 - random(6);                      //Set the random angle for bullet variation
        xx = x + lengthdir_x(20, mod_dif);                      //get the x/y position to create the bullet
        yy = y + lengthdir_y(20, mod_dif);
        instance_create(xx, yy, obj_Flash);                     //Create the muzzle flash
        with (instance_create(xx,yy,obj_Player_Bullet))         //create the bullet
            {
            dir = mod_dif;                                      //Set the bullet directiom
            }
        //Now we will create the bullet casing as a nice special effect
        with (instance_create(x + lengthdir_x(18, b_angle), y + lengthdir_y(18, b_angle), obj_Casing))
            {
            image_index = 0;
            direction = (other.b_angle + 90) - 15 + random(30);
            image_angle = direction - 90;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement
if go
{
var i, move_check, h_spd, v_spd;
//Base speed vars
h_spd = 0;
v_spd = 0;
//Check keys
if keyboard_check(global.Up) v_spd -= spd;
if keyboard_check(global.Down) v_spd += spd;
if keyboard_check(global.Right) h_spd += spd;
if keyboard_check(global.Left) h_spd -= spd;
//Now move the instance "virtually" while checking for collisions
//First the horizontal check
for (i = abs(h_spd); i &gt; 0; i -= 1;)
    {
    move_check = sign(h_spd) * i;
    if !place_meeting(x + move_check, y, obj_Wall) {x += move_check; break;} //no collision on full speed so break the loop and move the instance
    if !place_meeting(x + move_check, y - i, obj_Wall) y -= (i / 2);
    if !place_meeting(x + move_check, y + i, obj_Wall) y += (i / 2);  
    }
//The vertical check
for (i = abs(v_spd); i &gt; 0; i -= 1;)
    {
    move_check = sign(v_spd) * i;
    if !place_meeting(x , y + move_check, obj_Wall) {y += move_check; break;}//no collision on full speed so break the loop and move the instance
    if !place_meeting(x - i,y + move_check, obj_Wall) x -= (i / 2);
    if !place_meeting(x + i,y + move_check, obj_Wall) x += (i / 2);
    }
//If we are moving, animate the legs and make footsteps...
if x = xprevious &amp;&amp; y = yprevious
    {
    //Stop animating the legs and stop footsteps
    f_index = 0;
    if !s_play audio_stop_sound(snd_Footsteps);
    s_play = true;
    }
else
    {
    //Animate the legs manually
    f_index += f_spd;
    if f_index &gt; 6.5 f_index = -0.5;
    if s_play
        {
        //Loop footsteps
        audio_play_sound(snd_Footsteps, 0, true);
        s_play = false;
        }
    }
//make character point towards mouse
var dd,ts;
dd = ((((point_direction(x,y,mouse_x,mouse_y) - h_angle) mod 360) + 540) mod 360) - 180; //get the head rotation
h_angle += min(abs(dd), 10) * sign(dd);  
dd = ((((h_angle - b_angle) mod 360) + 540) mod 360) - 180; // Get the body rotation
ts = abs(dd) / 6;
if abs(dd) &lt; ts b_angle = h_angle else b_angle += sign(dd) * ts;
}

//Update the player position for the AI
global.Player_x=x;
global.Player_y=y;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_control">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision checks

//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other.id))
{
x -= xoff * om; //Move the instance out of collision
y -= yoff * om;
other.x += xoff * mm; //Move the other instance out of the collision
other.y += yoff * mm;
}

//Check to see if we have collided with an enemy
switch (other.object_index)
{
//We use a switch so that we can add new enemies in as we wish
case obj_Enemy:
    if alarm[1] &lt; 0
        {
        alarm[1] = room_speed / 2;                  //This alarm prevents a constant damage
        health -= other.dmg;                        //Remove health
        with (instance_create(x,y,obj_Decal))       //Create some blood!!!
            {
            audio_play_sound(choose(snd_Blood_1, snd_Blood_2, snd_Blood_3), 0, false);
            shadow = false;
            dist = 0;
            sprite_index = spr_Blood;
            image_speed = 0;
            image_xscale = 0.5 + random(0.5);
            image_yscale = 0.5 + random(0.5);
            speed = 0;
            image_angle = random(360)
            }
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot grenade
if g_shoot
{
with (instance_create(x, y, obj_Player_Granade))
    {
    direction = other.b_angle + 10 - random(20);
    speed = min(10, other.g_timer);
    spd = speed;
    }
g_shoot = false;
g_timer = 1;
alarm[2] = room_speed * 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grenade timer
if g_shoot
{
g_timer += 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room loop

//prevent the player from leaving the room.
if x &lt; 0
{
x += room_width
}
else
{
if x &gt; room_width x -= room_width;
}

if y &lt; 0
{
y += room_height
}
else
{
if y &gt; room_height y -= room_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw legs and shadow..
draw_sprite_ext(sprite_index, f_index, x - 2, y + 2, image_xscale, image_yscale, h_angle, c_black, 0.5);
draw_sprite_ext(sprite_index, f_index, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);
//Draw body and shadow...
draw_sprite_ext(spr_Player_Head, 1, x - 5, y + 5, image_xscale, image_yscale, b_angle, c_black, 0.5);
draw_sprite_ext(spr_Player_Head, 1, x, y, image_xscale, image_yscale, b_angle, image_blend, image_alpha);
//Draw head and shadow
draw_sprite_ext(spr_Player_Head, 0, x - 5, y + 5, image_xscale, image_yscale, h_angle, c_black, 0.3);
draw_sprite_ext(spr_Player_Head, 0, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,8</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
